# -*- coding: utf-8 -*-

import numpy as np
from scipy import constants as C

PHI = C.golden

icosahedron_v = [[-1, PHI, 0], [1, PHI, 0], [-1, -PHI, 0], [1, -PHI, 0],
                 [0, -1, PHI], [0, 1, PHI], [0, -1, -PHI], [0, 1, -PHI],
                 [PHI, 0, -1], [PHI, 0, 1], [-PHI, 0, -1], [-PHI, 0, 1]]


icosahedron_f = [[0, 11, 5], [0, 5, 1], [0, 1, 7], [0, 7, 10], [0, 10, 11],
                 [1, 5, 9], [5, 11, 4], [11, 10, 2], [10, 7, 6], [7, 1, 8],
                 [3, 9, 4], [3, 4, 2], [3, 2, 6], [3, 6, 8], [3, 8, 9],
                 [4, 9, 5], [2, 4, 11], [6, 2, 10], [8, 6, 7], [9, 8, 1]]


icosahedron_n = np.array([[-0.872678, 0.872678, 0.872678],
                          [0., 1.41202266, 0.53934466],
                          [0., 1.41202266, -0.53934466],
                          [-0.872678, 0.872678, -0.872678],
                          [-1.41202266, 0.53934466, 0.],
                          [0.872678, 0.872678, 0.872678],
                          [-0.53934466, 0., 1.41202266],
                          [-1.41202266, -0.53934466, 0.],
                          [-0.53934466, 0., -1.41202266],
                          [0.872678, 0.872678, -0.872678],
                          [0.872678, -0.872678, 0.872678],
                          [0., -1.41202266, 0.53934466],
                          [0., -1.41202266, -0.53934466],
                          [0.872678, -0.872678, -0.872678],
                          [1.41202266, -0.53934466, 0.],
                          [0.53934466, 0., 1.41202266],
                          [-0.872678, -0.872678, 0.872678],
                          [-0.872678, -0.872678, -0.872678],
                          [0.53934466, 0., -1.41202266],
                          [1.41202266, 0.53934466, 0.]])


def get_spherical_pos(theta, phi):
    return [np.sin(theta) * np.cos(phi), np.sin(theta) * np.sin(phi), np.cos(theta)]


def spherical_pos(angle=60):
    pos = []
    for theta in np.arange(0, 360, angle):
        for phi in np.arange(0, 360, angle):
            pos.append(get_spherical_pos(theta, phi))
    pos = np.array(pos)
    return pos
